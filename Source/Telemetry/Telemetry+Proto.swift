// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file telemetry.proto

import ProtocolBuffers


public func == (lhs: SecretMessage, rhs: SecretMessage) -> Bool {
	if (lhs === rhs) {
		return true
	}
	var fieldCheck: Bool = (lhs.hashValue == rhs.hashValue)
	fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
	fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
	fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
	fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
	fieldCheck = fieldCheck && (lhs.hasGroundSpeedMs == rhs.hasGroundSpeedMs) && (!lhs.hasGroundSpeedMs || lhs.groundSpeedMs == rhs.groundSpeedMs)
	fieldCheck = fieldCheck && (lhs.hasTrueHeading == rhs.hasTrueHeading) && (!lhs.hasTrueHeading || lhs.trueHeading == rhs.trueHeading)
	fieldCheck = fieldCheck && (lhs.hasBaro == rhs.hasBaro) && (!lhs.hasBaro || lhs.baro == rhs.baro)
	fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
	return fieldCheck
}

public func == (lhs: OpenMessage, rhs: OpenMessage) -> Bool {
	if (lhs === rhs) {
		return true
	}
	var fieldCheck: Bool = (lhs.hashValue == rhs.hashValue)
	fieldCheck = fieldCheck && (lhs.hasFlightId == rhs.hasFlightId) && (!lhs.hasFlightId || lhs.flightId == rhs.flightId)
	fieldCheck = fieldCheck && (lhs.hasIv == rhs.hasIv) && (!lhs.hasIv || lhs.iv == rhs.iv)
	fieldCheck = fieldCheck && (lhs.hasPayload == rhs.hasPayload) && (!lhs.hasPayload || lhs.payload == rhs.payload)
	fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
	return fieldCheck
}

public struct TelemetryRoot {
	public static let sharedInstance = TelemetryRoot()
	
	public var extensionRegistry: ExtensionRegistry
	
	init() {
		extensionRegistry = ExtensionRegistry()
		registerAllExtensions(extensionRegistry)
	}
	public func registerAllExtensions(registry: ExtensionRegistry) {
	}
}

final public class SecretMessage: GeneratedMessage, GeneratedMessageProtocol {
	// Decimal place requirement: 7 decimal places.
	public private(set) var latitude: Float = Float(0)
	
	public private(set) var hasLatitude: Bool = false
	// Decimal place requirement: 7 decimal places.
	public private(set) var longitude: Float = Float(0)
	
	public private(set) var hasLongitude: Bool = false
	// Altitude is always in Meters
	public private(set) var altitude: Int32 = Int32(0)
	
	public private(set) var hasAltitude: Bool = false
	// Seconds since epoc UTC
	public private(set) var timestamp: UInt64 = UInt64(0)
	
	public private(set) var hasTimestamp: Bool = false
	// Ground speen in meters/second.
	public private(set) var groundSpeedMs: UInt32 = UInt32(0)
	
	public private(set) var hasGroundSpeedMs: Bool = false
	// Heading relative to True North
	public private(set) var trueHeading: UInt32 = UInt32(0)
	
	public private(set) var hasTrueHeading: Bool = false
	// Barometric reading
	public private(set) var baro: Float = Float(0)
	
	public private(set) var hasBaro: Bool = false
	required public init() {
		super.init()
	}
	override public func isInitialized() -> Bool {
		if !hasLatitude {
			return false
		}
		if !hasLongitude {
			return false
		}
		if !hasAltitude {
			return false
		}
		if !hasTimestamp {
			return false
		}
		return true
	}
	override public func writeToCodedOutputStream(output: CodedOutputStream) throws {
		if hasLatitude {
			try output.writeFloat(1, value:latitude)
		}
		if hasLongitude {
			try output.writeFloat(2, value:longitude)
		}
		if hasAltitude {
			try output.writeSInt32(3, value:altitude)
		}
		if hasTimestamp {
			try output.writeUInt64(4, value:timestamp)
		}
		if hasGroundSpeedMs {
			try output.writeUInt32(5, value:groundSpeedMs)
		}
		if hasTrueHeading {
			try output.writeUInt32(6, value:trueHeading)
		}
		if hasBaro {
			try output.writeFloat(7, value:baro)
		}
		try unknownFields.writeToCodedOutputStream(output)
	}
	override public func serializedSize() -> Int32 {
		var serialize_size: Int32 = memoizedSerializedSize
		if serialize_size != -1 {
			return serialize_size
		}
		
		serialize_size = 0
		if hasLatitude {
			serialize_size += latitude.computeFloatSize(1)
		}
		if hasLongitude {
			serialize_size += longitude.computeFloatSize(2)
		}
		if hasAltitude {
			serialize_size += altitude.computeSInt32Size(3)
		}
		if hasTimestamp {
			serialize_size += timestamp.computeUInt64Size(4)
		}
		if hasGroundSpeedMs {
			serialize_size += groundSpeedMs.computeUInt32Size(5)
		}
		if hasTrueHeading {
			serialize_size += trueHeading.computeUInt32Size(6)
		}
		if hasBaro {
			serialize_size += baro.computeFloatSize(7)
		}
		serialize_size += unknownFields.serializedSize()
		memoizedSerializedSize = serialize_size
		return serialize_size
	}
	public class func parseArrayDelimitedFromInputStream(input: NSInputStream) throws -> Array<SecretMessage> {
		var mergedArray = Array<SecretMessage>()
		while let value = try parseFromDelimitedFromInputStream(input) {
			mergedArray += [value]
		}
		return mergedArray
	}
	public class func parseFromDelimitedFromInputStream(input: NSInputStream) throws -> SecretMessage? {
		return try SecretMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
	}
	public class func parseFromData(data: NSData) throws -> SecretMessage {
		return try SecretMessage.Builder().mergeFromData(data, extensionRegistry:TelemetryRoot.sharedInstance.extensionRegistry).build()
	}
	public class func parseFromData(data: NSData, extensionRegistry: ExtensionRegistry) throws -> SecretMessage {
		return try SecretMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
	}
	public class func parseFromInputStream(input: NSInputStream) throws -> SecretMessage {
		return try SecretMessage.Builder().mergeFromInputStream(input).build()
	}
	public class func parseFromInputStream(input: NSInputStream, extensionRegistry: ExtensionRegistry) throws -> SecretMessage {
		return try SecretMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
	}
	public class func parseFromCodedInputStream(input: CodedInputStream) throws -> SecretMessage {
		return try SecretMessage.Builder().mergeFromCodedInputStream(input).build()
	}
	public class func parseFromCodedInputStream(input: CodedInputStream, extensionRegistry: ExtensionRegistry) throws -> SecretMessage {
		return try SecretMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
	}
	public class func getBuilder() -> SecretMessage.Builder {
		return SecretMessage.classBuilder() as! SecretMessage.Builder
	}
	public func getBuilder() -> SecretMessage.Builder {
		return classBuilder() as! SecretMessage.Builder
	}
	public override class func classBuilder() -> MessageBuilder {
		return SecretMessage.Builder()
	}
	public override func classBuilder() -> MessageBuilder {
		return SecretMessage.Builder()
	}
	public func toBuilder() throws -> SecretMessage.Builder {
		return try SecretMessage.builderWithPrototype(self)
	}
	public class func builderWithPrototype(prototype: SecretMessage) throws -> SecretMessage.Builder {
		return try SecretMessage.Builder().mergeFrom(prototype)
	}
	override public func getDescription(indent: String) throws -> String {
		var output: String = ""
		if hasLatitude {
			output += "\(indent) latitude: \(latitude) \n"
		}
		if hasLongitude {
			output += "\(indent) longitude: \(longitude) \n"
		}
		if hasAltitude {
			output += "\(indent) altitude: \(altitude) \n"
		}
		if hasTimestamp {
			output += "\(indent) timestamp: \(timestamp) \n"
		}
		if hasGroundSpeedMs {
			output += "\(indent) groundSpeedMs: \(groundSpeedMs) \n"
		}
		if hasTrueHeading {
			output += "\(indent) trueHeading: \(trueHeading) \n"
		}
		if hasBaro {
			output += "\(indent) baro: \(baro) \n"
		}
		output += unknownFields.getDescription(indent)
		return output
	}
	override public var hashValue: Int {
		get {
			var hashCode: Int = 7
			if hasLatitude {
				hashCode = (hashCode &* 31) &+ latitude.hashValue
			}
			if hasLongitude {
				hashCode = (hashCode &* 31) &+ longitude.hashValue
			}
			if hasAltitude {
				hashCode = (hashCode &* 31) &+ altitude.hashValue
			}
			if hasTimestamp {
				hashCode = (hashCode &* 31) &+ timestamp.hashValue
			}
			if hasGroundSpeedMs {
				hashCode = (hashCode &* 31) &+ groundSpeedMs.hashValue
			}
			if hasTrueHeading {
				hashCode = (hashCode &* 31) &+ trueHeading.hashValue
			}
			if hasBaro {
				hashCode = (hashCode &* 31) &+ baro.hashValue
			}
			hashCode = (hashCode &* 31) &+  unknownFields.hashValue
			return hashCode
		}
	}
	
	
	//Meta information declaration start
	
	override public class func className() -> String {
		return "SecretMessage"
	}
	override public func className() -> String {
		return "SecretMessage"
	}
	override public func classMetaType() -> GeneratedMessage.Type {
		return SecretMessage.self
	}
	//Meta information declaration end
	
	final public class Builder: GeneratedMessageBuilder {
		private var builderResult: SecretMessage = SecretMessage()
		public func getMessage() -> SecretMessage {
			return builderResult
		}
		
		required override public init () {
			super.init()
		}
		public var hasLatitude: Bool {
			get {
				return builderResult.hasLatitude
			}
		}
		public var latitude: Float {
			get {
				return builderResult.latitude
			}
			set (value) {
				builderResult.hasLatitude = true
				builderResult.latitude = value
			}
		}
		public func setLatitude(value: Float) -> SecretMessage.Builder {
			self.latitude = value
			return self
		}
		public func clearLatitude() -> SecretMessage.Builder {
			builderResult.hasLatitude = false
			builderResult.latitude = Float(0)
			return self
		}
		public var hasLongitude: Bool {
			get {
				return builderResult.hasLongitude
			}
		}
		public var longitude: Float {
			get {
				return builderResult.longitude
			}
			set (value) {
				builderResult.hasLongitude = true
				builderResult.longitude = value
			}
		}
		public func setLongitude(value: Float) -> SecretMessage.Builder {
			self.longitude = value
			return self
		}
		public func clearLongitude() -> SecretMessage.Builder {
			builderResult.hasLongitude = false
			builderResult.longitude = Float(0)
			return self
		}
		public var hasAltitude: Bool {
			get {
				return builderResult.hasAltitude
			}
		}
		public var altitude: Int32 {
			get {
				return builderResult.altitude
			}
			set (value) {
				builderResult.hasAltitude = true
				builderResult.altitude = value
			}
		}
		public func setAltitude(value: Int32) -> SecretMessage.Builder {
			self.altitude = value
			return self
		}
		public func clearAltitude() -> SecretMessage.Builder {
			builderResult.hasAltitude = false
			builderResult.altitude = Int32(0)
			return self
		}
		public var hasTimestamp: Bool {
			get {
				return builderResult.hasTimestamp
			}
		}
		public var timestamp: UInt64 {
			get {
				return builderResult.timestamp
			}
			set (value) {
				builderResult.hasTimestamp = true
				builderResult.timestamp = value
			}
		}
		public func setTimestamp(value: UInt64) -> SecretMessage.Builder {
			self.timestamp = value
			return self
		}
		public func clearTimestamp() -> SecretMessage.Builder {
			builderResult.hasTimestamp = false
			builderResult.timestamp = UInt64(0)
			return self
		}
		public var hasGroundSpeedMs: Bool {
			get {
				return builderResult.hasGroundSpeedMs
			}
		}
		public var groundSpeedMs: UInt32 {
			get {
				return builderResult.groundSpeedMs
			}
			set (value) {
				builderResult.hasGroundSpeedMs = true
				builderResult.groundSpeedMs = value
			}
		}
		public func setGroundSpeedMs(value: UInt32) -> SecretMessage.Builder {
			self.groundSpeedMs = value
			return self
		}
		public func clearGroundSpeedMs() -> SecretMessage.Builder {
			builderResult.hasGroundSpeedMs = false
			builderResult.groundSpeedMs = UInt32(0)
			return self
		}
		public var hasTrueHeading: Bool {
			get {
				return builderResult.hasTrueHeading
			}
		}
		public var trueHeading: UInt32 {
			get {
				return builderResult.trueHeading
			}
			set (value) {
				builderResult.hasTrueHeading = true
				builderResult.trueHeading = value
			}
		}
		public func setTrueHeading(value: UInt32) -> SecretMessage.Builder {
			self.trueHeading = value
			return self
		}
		public func clearTrueHeading() -> SecretMessage.Builder {
			builderResult.hasTrueHeading = false
			builderResult.trueHeading = UInt32(0)
			return self
		}
		public var hasBaro: Bool {
			get {
				return builderResult.hasBaro
			}
		}
		public var baro: Float {
			get {
				return builderResult.baro
			}
			set (value) {
				builderResult.hasBaro = true
				builderResult.baro = value
			}
		}
		public func setBaro(value: Float) -> SecretMessage.Builder {
			self.baro = value
			return self
		}
		public func clearBaro() -> SecretMessage.Builder {
			builderResult.hasBaro = false
			builderResult.baro = Float(0)
			return self
		}
		override public var internalGetResult: GeneratedMessage {
			get {
				return builderResult
			}
		}
		public override func clear() -> SecretMessage.Builder {
			builderResult = SecretMessage()
			return self
		}
		public override func clone() throws -> SecretMessage.Builder {
			return try SecretMessage.builderWithPrototype(builderResult)
		}
		public override func build() throws -> SecretMessage {
			try checkInitialized()
			return buildPartial()
		}
		public func buildPartial() -> SecretMessage {
			let returnMe: SecretMessage = builderResult
			return returnMe
		}
		public func mergeFrom(other: SecretMessage) throws -> SecretMessage.Builder {
			if other == SecretMessage() {
				return self
			}
			if other.hasLatitude {
				latitude = other.latitude
			}
			if other.hasLongitude {
				longitude = other.longitude
			}
			if other.hasAltitude {
				altitude = other.altitude
			}
			if other.hasTimestamp {
				timestamp = other.timestamp
			}
			if other.hasGroundSpeedMs {
				groundSpeedMs = other.groundSpeedMs
			}
			if other.hasTrueHeading {
				trueHeading = other.trueHeading
			}
			if other.hasBaro {
				baro = other.baro
			}
			try mergeUnknownFields(other.unknownFields)
			return self
		}
		public override func mergeFromCodedInputStream(input: CodedInputStream) throws -> SecretMessage.Builder {
			return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
		}
		public override func mergeFromCodedInputStream(input: CodedInputStream, extensionRegistry: ExtensionRegistry) throws -> SecretMessage.Builder {
			let unknownFieldsBuilder: UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
			while (true) {
				let protobufTag = try input.readTag()
				switch protobufTag {
				case 0:
					self.unknownFields = try unknownFieldsBuilder.build()
					return self
					
				case 13 :
					latitude = try input.readFloat()
					
				case 21 :
					longitude = try input.readFloat()
					
				case 24 :
					altitude = try input.readSInt32()
					
				case 32 :
					timestamp = try input.readUInt64()
					
				case 40 :
					groundSpeedMs = try input.readUInt32()
					
				case 48 :
					trueHeading = try input.readUInt32()
					
				case 61 :
					baro = try input.readFloat()
					
				default:
					if (!(try parseUnknownField(input, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
						unknownFields = try unknownFieldsBuilder.build()
						return self
					}
				}
			}
		}
	}
	
}

final public class OpenMessage: GeneratedMessage, GeneratedMessageProtocol {
	public private(set) var flightId: String = ""
	
	public private(set) var hasFlightId: Bool = false
	public private(set) var iv: NSData = NSData()
	
	public private(set) var hasIv: Bool = false
	public private(set) var payload: NSData = NSData()
	
	public private(set) var hasPayload: Bool = false
	required public init() {
		super.init()
	}
	override public func isInitialized() -> Bool {
		if !hasFlightId {
			return false
		}
		if !hasIv {
			return false
		}
		if !hasPayload {
			return false
		}
		return true
	}
	override public func writeToCodedOutputStream(output: CodedOutputStream) throws {
		if hasFlightId {
			try output.writeString(1, value:flightId)
		}
		if hasIv {
			try output.writeData(2, value:iv)
		}
		if hasPayload {
			try output.writeData(3, value:payload)
		}
		try unknownFields.writeToCodedOutputStream(output)
	}
	override public func serializedSize() -> Int32 {
		var serialize_size: Int32 = memoizedSerializedSize
		if serialize_size != -1 {
			return serialize_size
		}
		
		serialize_size = 0
		if hasFlightId {
			serialize_size += flightId.computeStringSize(1)
		}
		if hasIv {
			serialize_size += iv.computeDataSize(2)
		}
		if hasPayload {
			serialize_size += payload.computeDataSize(3)
		}
		serialize_size += unknownFields.serializedSize()
		memoizedSerializedSize = serialize_size
		return serialize_size
	}
	public class func parseArrayDelimitedFromInputStream(input: NSInputStream) throws -> Array<OpenMessage> {
		var mergedArray = Array<OpenMessage>()
		while let value = try parseFromDelimitedFromInputStream(input) {
			mergedArray += [value]
		}
		return mergedArray
	}
	public class func parseFromDelimitedFromInputStream(input: NSInputStream) throws -> OpenMessage? {
		return try OpenMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
	}
	public class func parseFromData(data: NSData) throws -> OpenMessage {
		return try OpenMessage.Builder().mergeFromData(data, extensionRegistry:TelemetryRoot.sharedInstance.extensionRegistry).build()
	}
	public class func parseFromData(data: NSData, extensionRegistry: ExtensionRegistry) throws -> OpenMessage {
		return try OpenMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
	}
	public class func parseFromInputStream(input: NSInputStream) throws -> OpenMessage {
		return try OpenMessage.Builder().mergeFromInputStream(input).build()
	}
	public class func parseFromInputStream(input: NSInputStream, extensionRegistry: ExtensionRegistry) throws -> OpenMessage {
		return try OpenMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
	}
	public class func parseFromCodedInputStream(input: CodedInputStream) throws -> OpenMessage {
		return try OpenMessage.Builder().mergeFromCodedInputStream(input).build()
	}
	public class func parseFromCodedInputStream(input: CodedInputStream, extensionRegistry: ExtensionRegistry) throws -> OpenMessage {
		return try OpenMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
	}
	public class func getBuilder() -> OpenMessage.Builder {
		return OpenMessage.classBuilder() as! OpenMessage.Builder
	}
	public func getBuilder() -> OpenMessage.Builder {
		return classBuilder() as! OpenMessage.Builder
	}
	public override class func classBuilder() -> MessageBuilder {
		return OpenMessage.Builder()
	}
	public override func classBuilder() -> MessageBuilder {
		return OpenMessage.Builder()
	}
	public func toBuilder() throws -> OpenMessage.Builder {
		return try OpenMessage.builderWithPrototype(self)
	}
	public class func builderWithPrototype(prototype: OpenMessage) throws -> OpenMessage.Builder {
		return try OpenMessage.Builder().mergeFrom(prototype)
	}
	override public func getDescription(indent: String) throws -> String {
		var output: String = ""
		if hasFlightId {
			output += "\(indent) flightId: \(flightId) \n"
		}
		if hasIv {
			output += "\(indent) iv: \(iv) \n"
		}
		if hasPayload {
			output += "\(indent) payload: \(payload) \n"
		}
		output += unknownFields.getDescription(indent)
		return output
	}
	override public var hashValue: Int {
		get {
			var hashCode: Int = 7
			if hasFlightId {
				hashCode = (hashCode &* 31) &+ flightId.hashValue
			}
			if hasIv {
				hashCode = (hashCode &* 31) &+ iv.hashValue
			}
			if hasPayload {
				hashCode = (hashCode &* 31) &+ payload.hashValue
			}
			hashCode = (hashCode &* 31) &+  unknownFields.hashValue
			return hashCode
		}
	}
	
	
	//Meta information declaration start
	
	override public class func className() -> String {
		return "OpenMessage"
	}
	override public func className() -> String {
		return "OpenMessage"
	}
	override public func classMetaType() -> GeneratedMessage.Type {
		return OpenMessage.self
	}
	//Meta information declaration end
	
	final public class Builder: GeneratedMessageBuilder {
		private var builderResult: OpenMessage = OpenMessage()
		public func getMessage() -> OpenMessage {
			return builderResult
		}
		
		required override public init () {
			super.init()
		}
		public var hasFlightId: Bool {
			get {
				return builderResult.hasFlightId
			}
		}
		public var flightId: String {
			get {
				return builderResult.flightId
			}
			set (value) {
				builderResult.hasFlightId = true
				builderResult.flightId = value
			}
		}
		public func setFlightId(value: String) -> OpenMessage.Builder {
			self.flightId = value
			return self
		}
		public func clearFlightId() -> OpenMessage.Builder {
			builderResult.hasFlightId = false
			builderResult.flightId = ""
			return self
		}
		public var hasIv: Bool {
			get {
				return builderResult.hasIv
			}
		}
		public var iv: NSData {
			get {
				return builderResult.iv
			}
			set (value) {
				builderResult.hasIv = true
				builderResult.iv = value
			}
		}
		public func setIv(value: NSData) -> OpenMessage.Builder {
			self.iv = value
			return self
		}
		public func clearIv() -> OpenMessage.Builder {
			builderResult.hasIv = false
			builderResult.iv = NSData()
			return self
		}
		public var hasPayload: Bool {
			get {
				return builderResult.hasPayload
			}
		}
		public var payload: NSData {
			get {
				return builderResult.payload
			}
			set (value) {
				builderResult.hasPayload = true
				builderResult.payload = value
			}
		}
		public func setPayload(value: NSData) -> OpenMessage.Builder {
			self.payload = value
			return self
		}
		public func clearPayload() -> OpenMessage.Builder {
			builderResult.hasPayload = false
			builderResult.payload = NSData()
			return self
		}
		override public var internalGetResult: GeneratedMessage {
			get {
				return builderResult
			}
		}
		public override func clear() -> OpenMessage.Builder {
			builderResult = OpenMessage()
			return self
		}
		public override func clone() throws -> OpenMessage.Builder {
			return try OpenMessage.builderWithPrototype(builderResult)
		}
		public override func build() throws -> OpenMessage {
			try checkInitialized()
			return buildPartial()
		}
		public func buildPartial() -> OpenMessage {
			let returnMe: OpenMessage = builderResult
			return returnMe
		}
		public func mergeFrom(other: OpenMessage) throws -> OpenMessage.Builder {
			if other == OpenMessage() {
				return self
			}
			if other.hasFlightId {
				flightId = other.flightId
			}
			if other.hasIv {
				iv = other.iv
			}
			if other.hasPayload {
				payload = other.payload
			}
			try mergeUnknownFields(other.unknownFields)
			return self
		}
		public override func mergeFromCodedInputStream(input: CodedInputStream) throws -> OpenMessage.Builder {
			return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
		}
		public override func mergeFromCodedInputStream(input: CodedInputStream, extensionRegistry: ExtensionRegistry) throws -> OpenMessage.Builder {
			let unknownFieldsBuilder: UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
			while (true) {
				let protobufTag = try input.readTag()
				switch protobufTag {
				case 0:
					self.unknownFields = try unknownFieldsBuilder.build()
					return self
					
				case 10 :
					flightId = try input.readString()
					
				case 18 :
					iv = try input.readData()
					
				case 26 :
					payload = try input.readData()
					
				default:
					if (!(try parseUnknownField(input, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
						unknownFields = try unknownFieldsBuilder.build()
						return self
					}
				}
			}
		}
	}
	
}


// @@protoc_insertion_point(global_scope)
