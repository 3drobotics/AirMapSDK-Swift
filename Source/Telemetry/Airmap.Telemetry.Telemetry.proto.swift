// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "telemetry.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Airmap { public struct Telemetry { }}

public extension Airmap.Telemetry {
  public struct TelemetryRoot {
    public static let `default` = TelemetryRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class Position : GeneratedMessage {

    public static func == (lhs: Airmap.Telemetry.Position, rhs: Airmap.Telemetry.Position) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
      fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
      fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
      fieldCheck = fieldCheck && (lhs.hasAltitudeAgl == rhs.hasAltitudeAgl) && (!lhs.hasAltitudeAgl || lhs.altitudeAgl == rhs.altitudeAgl)
      fieldCheck = fieldCheck && (lhs.hasAltitudeMsl == rhs.hasAltitudeMsl) && (!lhs.hasAltitudeMsl || lhs.altitudeMsl == rhs.altitudeMsl)
      fieldCheck = fieldCheck && (lhs.hasHorizontalAccuracy == rhs.hasHorizontalAccuracy) && (!lhs.hasHorizontalAccuracy || lhs.horizontalAccuracy == rhs.horizontalAccuracy)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    // UNIX time in Milliseconds
    public fileprivate(set) var timestamp:UInt64 = UInt64(0)
    public fileprivate(set) var hasTimestamp:Bool = false

    // The recorded latitude
    // Decimal place requirement: 7 decimal places.
    public fileprivate(set) var latitude:Double = Double(0)
    public fileprivate(set) var hasLatitude:Bool = false

    // The recorded longitude
    // Decimal place requirement: 7 decimal places.
    public fileprivate(set) var longitude:Double = Double(0)
    public fileprivate(set) var hasLongitude:Bool = false

    //Altitude above mean sea level (ie. GPS), meters
    public fileprivate(set) var altitudeAgl:Float = Float(0)
    public fileprivate(set) var hasAltitudeAgl:Bool = false

    // Altitude above ground level, meters
    public fileprivate(set) var altitudeMsl:Float = Float(0)
    public fileprivate(set) var hasAltitudeMsl:Bool = false

    // Horizontal Dilution of Precision, in meters
    public fileprivate(set) var horizontalAccuracy:Float = Float(0)
    public fileprivate(set) var hasHorizontalAccuracy:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasTimestamp {
        try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
      }
      if hasLatitude {
        try codedOutputStream.writeDouble(fieldNumber: 2, value:latitude)
      }
      if hasLongitude {
        try codedOutputStream.writeDouble(fieldNumber: 3, value:longitude)
      }
      if hasAltitudeAgl {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:altitudeAgl)
      }
      if hasAltitudeMsl {
        try codedOutputStream.writeFloat(fieldNumber: 5, value:altitudeMsl)
      }
      if hasHorizontalAccuracy {
        try codedOutputStream.writeFloat(fieldNumber: 6, value:horizontalAccuracy)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestamp {
        serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(fieldNumber: 2)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(fieldNumber: 3)
      }
      if hasAltitudeAgl {
        serialize_size += altitudeAgl.computeFloatSize(fieldNumber: 4)
      }
      if hasAltitudeMsl {
        serialize_size += altitudeMsl.computeFloatSize(fieldNumber: 5)
      }
      if hasHorizontalAccuracy {
        serialize_size += horizontalAccuracy.computeFloatSize(fieldNumber: 6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Airmap.Telemetry.Position.Builder {
      return Airmap.Telemetry.Position.classBuilder() as! Airmap.Telemetry.Position.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Position.Builder {
      return classBuilder() as! Airmap.Telemetry.Position.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Position.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Position.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Position.Builder {
      return try Airmap.Telemetry.Position.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Position) throws -> Airmap.Telemetry.Position.Builder {
      return try Airmap.Telemetry.Position.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasTimestamp {
        jsonMap["timestamp"] = "\(timestamp)"
      }
      if hasLatitude {
        jsonMap["latitude"] = Double(latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = Double(longitude)
      }
      if hasAltitudeAgl {
        jsonMap["altitudeAgl"] = Float(altitudeAgl)
      }
      if hasAltitudeMsl {
        jsonMap["altitudeMsl"] = Float(altitudeMsl)
      }
      if hasHorizontalAccuracy {
        jsonMap["horizontalAccuracy"] = Float(horizontalAccuracy)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasAltitudeAgl {
        output += "\(indent) altitudeAgl: \(altitudeAgl) \n"
      }
      if hasAltitudeMsl {
        output += "\(indent) altitudeMsl: \(altitudeMsl) \n"
      }
      if hasHorizontalAccuracy {
        output += "\(indent) horizontalAccuracy: \(horizontalAccuracy) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasAltitudeAgl {
               hashCode = (hashCode &* 31) &+ altitudeAgl.hashValue
            }
            if hasAltitudeMsl {
               hashCode = (hashCode &* 31) &+ altitudeMsl.hashValue
            }
            if hasHorizontalAccuracy {
               hashCode = (hashCode &* 31) &+ horizontalAccuracy.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Position"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Position"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Airmap.Telemetry.Position = Airmap.Telemetry.Position()
      public func getMessage() -> Airmap.Telemetry.Position {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      public var timestamp:UInt64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      @discardableResult
      public func setTimestamp(_ value:UInt64) -> Airmap.Telemetry.Position.Builder {
        self.timestamp = value
        return self
      }
      @discardableResult
      public func clearTimestamp() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = UInt64(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      @discardableResult
      public func setLatitude(_ value:Double) -> Airmap.Telemetry.Position.Builder {
        self.latitude = value
        return self
      }
      @discardableResult
      public func clearLatitude() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      @discardableResult
      public func setLongitude(_ value:Double) -> Airmap.Telemetry.Position.Builder {
        self.longitude = value
        return self
      }
      @discardableResult
      public func clearLongitude() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasAltitudeAgl:Bool {
           get {
                return builderResult.hasAltitudeAgl
           }
      }
      public var altitudeAgl:Float {
           get {
                return builderResult.altitudeAgl
           }
           set (value) {
               builderResult.hasAltitudeAgl = true
               builderResult.altitudeAgl = value
           }
      }
      @discardableResult
      public func setAltitudeAgl(_ value:Float) -> Airmap.Telemetry.Position.Builder {
        self.altitudeAgl = value
        return self
      }
      @discardableResult
      public func clearAltitudeAgl() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasAltitudeAgl = false
           builderResult.altitudeAgl = Float(0)
           return self
      }
      public var hasAltitudeMsl:Bool {
           get {
                return builderResult.hasAltitudeMsl
           }
      }
      public var altitudeMsl:Float {
           get {
                return builderResult.altitudeMsl
           }
           set (value) {
               builderResult.hasAltitudeMsl = true
               builderResult.altitudeMsl = value
           }
      }
      @discardableResult
      public func setAltitudeMsl(_ value:Float) -> Airmap.Telemetry.Position.Builder {
        self.altitudeMsl = value
        return self
      }
      @discardableResult
      public func clearAltitudeMsl() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasAltitudeMsl = false
           builderResult.altitudeMsl = Float(0)
           return self
      }
      public var hasHorizontalAccuracy:Bool {
           get {
                return builderResult.hasHorizontalAccuracy
           }
      }
      public var horizontalAccuracy:Float {
           get {
                return builderResult.horizontalAccuracy
           }
           set (value) {
               builderResult.hasHorizontalAccuracy = true
               builderResult.horizontalAccuracy = value
           }
      }
      @discardableResult
      public func setHorizontalAccuracy(_ value:Float) -> Airmap.Telemetry.Position.Builder {
        self.horizontalAccuracy = value
        return self
      }
      @discardableResult
      public func clearHorizontalAccuracy() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasHorizontalAccuracy = false
           builderResult.horizontalAccuracy = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Airmap.Telemetry.Position.Builder {
        builderResult = Airmap.Telemetry.Position()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Position.Builder {
        return try Airmap.Telemetry.Position.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Position {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Position {
        let returnMe:Airmap.Telemetry.Position = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Airmap.Telemetry.Position) throws -> Airmap.Telemetry.Position.Builder {
        if other == Airmap.Telemetry.Position() {
         return self
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasAltitudeAgl {
             altitudeAgl = other.altitudeAgl
        }
        if other.hasAltitudeMsl {
             altitudeMsl = other.altitudeMsl
        }
        if other.hasHorizontalAccuracy {
             horizontalAccuracy = other.horizontalAccuracy
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Position.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            timestamp = try codedInputStream.readUInt64()

          case 17:
            latitude = try codedInputStream.readDouble()

          case 25:
            longitude = try codedInputStream.readDouble()

          case 37:
            altitudeAgl = try codedInputStream.readFloat()

          case 45:
            altitudeMsl = try codedInputStream.readFloat()

          case 53:
            horizontalAccuracy = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Position.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Position.Builder()
        if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
          resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? Double {
          resultDecodedBuilder.latitude = Double(jsonValueLatitude)
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? Double {
          resultDecodedBuilder.longitude = Double(jsonValueLongitude)
        }
        if let jsonValueAltitudeAgl = jsonMap["altitudeAgl"] as? Float {
          resultDecodedBuilder.altitudeAgl = Float(jsonValueAltitudeAgl)
        }
        if let jsonValueAltitudeMsl = jsonMap["altitudeMsl"] as? Float {
          resultDecodedBuilder.altitudeMsl = Float(jsonValueAltitudeMsl)
        }
        if let jsonValueHorizontalAccuracy = jsonMap["horizontalAccuracy"] as? Float {
          resultDecodedBuilder.horizontalAccuracy = Float(jsonValueHorizontalAccuracy)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Airmap.Telemetry.Position.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Position.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class Attitude : GeneratedMessage {

    public static func == (lhs: Airmap.Telemetry.Attitude, rhs: Airmap.Telemetry.Attitude) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
      fieldCheck = fieldCheck && (lhs.hasYaw == rhs.hasYaw) && (!lhs.hasYaw || lhs.yaw == rhs.yaw)
      fieldCheck = fieldCheck && (lhs.hasPitch == rhs.hasPitch) && (!lhs.hasPitch || lhs.pitch == rhs.pitch)
      fieldCheck = fieldCheck && (lhs.hasRoll == rhs.hasRoll) && (!lhs.hasRoll || lhs.roll == rhs.roll)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    // UNIX time in Milliseconds
    public fileprivate(set) var timestamp:UInt64 = UInt64(0)
    public fileprivate(set) var hasTimestamp:Bool = false

    // Yaw angle measured from True North, { 0 <= x < 360 } degrees
    public fileprivate(set) var yaw:Float = Float(0)
    public fileprivate(set) var hasYaw:Bool = false

    // Pitch angle, { -180 < x <= 180 } degrees
    public fileprivate(set) var pitch:Float = Float(0)
    public fileprivate(set) var hasPitch:Bool = false

    // Roll angle, { -180 < x <= 180 } degrees
    public fileprivate(set) var roll:Float = Float(0)
    public fileprivate(set) var hasRoll:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasTimestamp {
        try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
      }
      if hasYaw {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:yaw)
      }
      if hasPitch {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:pitch)
      }
      if hasRoll {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:roll)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestamp {
        serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
      }
      if hasYaw {
        serialize_size += yaw.computeFloatSize(fieldNumber: 2)
      }
      if hasPitch {
        serialize_size += pitch.computeFloatSize(fieldNumber: 3)
      }
      if hasRoll {
        serialize_size += roll.computeFloatSize(fieldNumber: 4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Airmap.Telemetry.Attitude.Builder {
      return Airmap.Telemetry.Attitude.classBuilder() as! Airmap.Telemetry.Attitude.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Attitude.Builder {
      return classBuilder() as! Airmap.Telemetry.Attitude.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Attitude.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Attitude.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Attitude.Builder {
      return try Airmap.Telemetry.Attitude.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Attitude) throws -> Airmap.Telemetry.Attitude.Builder {
      return try Airmap.Telemetry.Attitude.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasTimestamp {
        jsonMap["timestamp"] = "\(timestamp)"
      }
      if hasYaw {
        jsonMap["yaw"] = Float(yaw)
      }
      if hasPitch {
        jsonMap["pitch"] = Float(pitch)
      }
      if hasRoll {
        jsonMap["roll"] = Float(roll)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Attitude {
      return try Airmap.Telemetry.Attitude.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Airmap.Telemetry.Attitude {
      return try Airmap.Telemetry.Attitude.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      if hasYaw {
        output += "\(indent) yaw: \(yaw) \n"
      }
      if hasPitch {
        output += "\(indent) pitch: \(pitch) \n"
      }
      if hasRoll {
        output += "\(indent) roll: \(roll) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            if hasYaw {
               hashCode = (hashCode &* 31) &+ yaw.hashValue
            }
            if hasPitch {
               hashCode = (hashCode &* 31) &+ pitch.hashValue
            }
            if hasRoll {
               hashCode = (hashCode &* 31) &+ roll.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Attitude"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Attitude"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Airmap.Telemetry.Attitude = Airmap.Telemetry.Attitude()
      public func getMessage() -> Airmap.Telemetry.Attitude {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      public var timestamp:UInt64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      @discardableResult
      public func setTimestamp(_ value:UInt64) -> Airmap.Telemetry.Attitude.Builder {
        self.timestamp = value
        return self
      }
      @discardableResult
      public func clearTimestamp() -> Airmap.Telemetry.Attitude.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = UInt64(0)
           return self
      }
      public var hasYaw:Bool {
           get {
                return builderResult.hasYaw
           }
      }
      public var yaw:Float {
           get {
                return builderResult.yaw
           }
           set (value) {
               builderResult.hasYaw = true
               builderResult.yaw = value
           }
      }
      @discardableResult
      public func setYaw(_ value:Float) -> Airmap.Telemetry.Attitude.Builder {
        self.yaw = value
        return self
      }
      @discardableResult
      public func clearYaw() -> Airmap.Telemetry.Attitude.Builder{
           builderResult.hasYaw = false
           builderResult.yaw = Float(0)
           return self
      }
      public var hasPitch:Bool {
           get {
                return builderResult.hasPitch
           }
      }
      public var pitch:Float {
           get {
                return builderResult.pitch
           }
           set (value) {
               builderResult.hasPitch = true
               builderResult.pitch = value
           }
      }
      @discardableResult
      public func setPitch(_ value:Float) -> Airmap.Telemetry.Attitude.Builder {
        self.pitch = value
        return self
      }
      @discardableResult
      public func clearPitch() -> Airmap.Telemetry.Attitude.Builder{
           builderResult.hasPitch = false
           builderResult.pitch = Float(0)
           return self
      }
      public var hasRoll:Bool {
           get {
                return builderResult.hasRoll
           }
      }
      public var roll:Float {
           get {
                return builderResult.roll
           }
           set (value) {
               builderResult.hasRoll = true
               builderResult.roll = value
           }
      }
      @discardableResult
      public func setRoll(_ value:Float) -> Airmap.Telemetry.Attitude.Builder {
        self.roll = value
        return self
      }
      @discardableResult
      public func clearRoll() -> Airmap.Telemetry.Attitude.Builder{
           builderResult.hasRoll = false
           builderResult.roll = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Airmap.Telemetry.Attitude.Builder {
        builderResult = Airmap.Telemetry.Attitude()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Attitude.Builder {
        return try Airmap.Telemetry.Attitude.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Attitude {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Attitude {
        let returnMe:Airmap.Telemetry.Attitude = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Airmap.Telemetry.Attitude) throws -> Airmap.Telemetry.Attitude.Builder {
        if other == Airmap.Telemetry.Attitude() {
         return self
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        if other.hasYaw {
             yaw = other.yaw
        }
        if other.hasPitch {
             pitch = other.pitch
        }
        if other.hasRoll {
             roll = other.roll
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Attitude.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Attitude.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            timestamp = try codedInputStream.readUInt64()

          case 21:
            yaw = try codedInputStream.readFloat()

          case 29:
            pitch = try codedInputStream.readFloat()

          case 37:
            roll = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Attitude.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Attitude.Builder()
        if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
          resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
        }
        if let jsonValueYaw = jsonMap["yaw"] as? Float {
          resultDecodedBuilder.yaw = Float(jsonValueYaw)
        }
        if let jsonValuePitch = jsonMap["pitch"] as? Float {
          resultDecodedBuilder.pitch = Float(jsonValuePitch)
        }
        if let jsonValueRoll = jsonMap["roll"] as? Float {
          resultDecodedBuilder.roll = Float(jsonValueRoll)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Airmap.Telemetry.Attitude.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Attitude.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class Speed : GeneratedMessage {

    public static func == (lhs: Airmap.Telemetry.Speed, rhs: Airmap.Telemetry.Speed) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
      fieldCheck = fieldCheck && (lhs.hasVelocityX == rhs.hasVelocityX) && (!lhs.hasVelocityX || lhs.velocityX == rhs.velocityX)
      fieldCheck = fieldCheck && (lhs.hasVelocityY == rhs.hasVelocityY) && (!lhs.hasVelocityY || lhs.velocityY == rhs.velocityY)
      fieldCheck = fieldCheck && (lhs.hasVelocityZ == rhs.hasVelocityZ) && (!lhs.hasVelocityZ || lhs.velocityZ == rhs.velocityZ)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    // UNIX time in Milliseconds
    public fileprivate(set) var timestamp:UInt64 = UInt64(0)
    public fileprivate(set) var hasTimestamp:Bool = false

    // Aircraft Speed in the x direction in meters per second using the North-East-Down (N-E-D) coordinate system
    public fileprivate(set) var velocityX:Float = Float(0)
    public fileprivate(set) var hasVelocityX:Bool = false

    // Aircraft Speed in the y direction in meters per second using the North-East-Down (N-E-D) coordinate system
    public fileprivate(set) var velocityY:Float = Float(0)
    public fileprivate(set) var hasVelocityY:Bool = false

    // Aircraft Speed in the z direction in meters per second using the North-East-Down (N-E-D) coordinate system
    public fileprivate(set) var velocityZ:Float = Float(0)
    public fileprivate(set) var hasVelocityZ:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasTimestamp {
        try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
      }
      if hasVelocityX {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:velocityX)
      }
      if hasVelocityY {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:velocityY)
      }
      if hasVelocityZ {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:velocityZ)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestamp {
        serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
      }
      if hasVelocityX {
        serialize_size += velocityX.computeFloatSize(fieldNumber: 2)
      }
      if hasVelocityY {
        serialize_size += velocityY.computeFloatSize(fieldNumber: 3)
      }
      if hasVelocityZ {
        serialize_size += velocityZ.computeFloatSize(fieldNumber: 4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Airmap.Telemetry.Speed.Builder {
      return Airmap.Telemetry.Speed.classBuilder() as! Airmap.Telemetry.Speed.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Speed.Builder {
      return classBuilder() as! Airmap.Telemetry.Speed.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Speed.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Speed.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Speed.Builder {
      return try Airmap.Telemetry.Speed.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Speed) throws -> Airmap.Telemetry.Speed.Builder {
      return try Airmap.Telemetry.Speed.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasTimestamp {
        jsonMap["timestamp"] = "\(timestamp)"
      }
      if hasVelocityX {
        jsonMap["velocityX"] = Float(velocityX)
      }
      if hasVelocityY {
        jsonMap["velocityY"] = Float(velocityY)
      }
      if hasVelocityZ {
        jsonMap["velocityZ"] = Float(velocityZ)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      if hasVelocityX {
        output += "\(indent) velocityX: \(velocityX) \n"
      }
      if hasVelocityY {
        output += "\(indent) velocityY: \(velocityY) \n"
      }
      if hasVelocityZ {
        output += "\(indent) velocityZ: \(velocityZ) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            if hasVelocityX {
               hashCode = (hashCode &* 31) &+ velocityX.hashValue
            }
            if hasVelocityY {
               hashCode = (hashCode &* 31) &+ velocityY.hashValue
            }
            if hasVelocityZ {
               hashCode = (hashCode &* 31) &+ velocityZ.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Speed"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Speed"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Airmap.Telemetry.Speed = Airmap.Telemetry.Speed()
      public func getMessage() -> Airmap.Telemetry.Speed {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      public var timestamp:UInt64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      @discardableResult
      public func setTimestamp(_ value:UInt64) -> Airmap.Telemetry.Speed.Builder {
        self.timestamp = value
        return self
      }
      @discardableResult
      public func clearTimestamp() -> Airmap.Telemetry.Speed.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = UInt64(0)
           return self
      }
      public var hasVelocityX:Bool {
           get {
                return builderResult.hasVelocityX
           }
      }
      public var velocityX:Float {
           get {
                return builderResult.velocityX
           }
           set (value) {
               builderResult.hasVelocityX = true
               builderResult.velocityX = value
           }
      }
      @discardableResult
      public func setVelocityX(_ value:Float) -> Airmap.Telemetry.Speed.Builder {
        self.velocityX = value
        return self
      }
      @discardableResult
      public func clearVelocityX() -> Airmap.Telemetry.Speed.Builder{
           builderResult.hasVelocityX = false
           builderResult.velocityX = Float(0)
           return self
      }
      public var hasVelocityY:Bool {
           get {
                return builderResult.hasVelocityY
           }
      }
      public var velocityY:Float {
           get {
                return builderResult.velocityY
           }
           set (value) {
               builderResult.hasVelocityY = true
               builderResult.velocityY = value
           }
      }
      @discardableResult
      public func setVelocityY(_ value:Float) -> Airmap.Telemetry.Speed.Builder {
        self.velocityY = value
        return self
      }
      @discardableResult
      public func clearVelocityY() -> Airmap.Telemetry.Speed.Builder{
           builderResult.hasVelocityY = false
           builderResult.velocityY = Float(0)
           return self
      }
      public var hasVelocityZ:Bool {
           get {
                return builderResult.hasVelocityZ
           }
      }
      public var velocityZ:Float {
           get {
                return builderResult.velocityZ
           }
           set (value) {
               builderResult.hasVelocityZ = true
               builderResult.velocityZ = value
           }
      }
      @discardableResult
      public func setVelocityZ(_ value:Float) -> Airmap.Telemetry.Speed.Builder {
        self.velocityZ = value
        return self
      }
      @discardableResult
      public func clearVelocityZ() -> Airmap.Telemetry.Speed.Builder{
           builderResult.hasVelocityZ = false
           builderResult.velocityZ = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Airmap.Telemetry.Speed.Builder {
        builderResult = Airmap.Telemetry.Speed()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Speed.Builder {
        return try Airmap.Telemetry.Speed.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Speed {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Speed {
        let returnMe:Airmap.Telemetry.Speed = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Airmap.Telemetry.Speed) throws -> Airmap.Telemetry.Speed.Builder {
        if other == Airmap.Telemetry.Speed() {
         return self
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        if other.hasVelocityX {
             velocityX = other.velocityX
        }
        if other.hasVelocityY {
             velocityY = other.velocityY
        }
        if other.hasVelocityZ {
             velocityZ = other.velocityZ
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Speed.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            timestamp = try codedInputStream.readUInt64()

          case 21:
            velocityX = try codedInputStream.readFloat()

          case 29:
            velocityY = try codedInputStream.readFloat()

          case 37:
            velocityZ = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Speed.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Speed.Builder()
        if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
          resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
        }
        if let jsonValueVelocityX = jsonMap["velocityX"] as? Float {
          resultDecodedBuilder.velocityX = Float(jsonValueVelocityX)
        }
        if let jsonValueVelocityY = jsonMap["velocityY"] as? Float {
          resultDecodedBuilder.velocityY = Float(jsonValueVelocityY)
        }
        if let jsonValueVelocityZ = jsonMap["velocityZ"] as? Float {
          resultDecodedBuilder.velocityZ = Float(jsonValueVelocityZ)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Airmap.Telemetry.Speed.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Speed.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class Barometer : GeneratedMessage {

    public static func == (lhs: Airmap.Telemetry.Barometer, rhs: Airmap.Telemetry.Barometer) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
      fieldCheck = fieldCheck && (lhs.hasPressure == rhs.hasPressure) && (!lhs.hasPressure || lhs.pressure == rhs.pressure)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    // UNIX time in Milliseconds
    public fileprivate(set) var timestamp:UInt64 = UInt64(0)
    public fileprivate(set) var hasTimestamp:Bool = false

    // Barometric pressure in hPa
    public fileprivate(set) var pressure:Float = Float(0)
    public fileprivate(set) var hasPressure:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasTimestamp {
        try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
      }
      if hasPressure {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:pressure)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestamp {
        serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
      }
      if hasPressure {
        serialize_size += pressure.computeFloatSize(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Airmap.Telemetry.Barometer.Builder {
      return Airmap.Telemetry.Barometer.classBuilder() as! Airmap.Telemetry.Barometer.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Barometer.Builder {
      return classBuilder() as! Airmap.Telemetry.Barometer.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Barometer.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Airmap.Telemetry.Barometer.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Barometer.Builder {
      return try Airmap.Telemetry.Barometer.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Barometer) throws -> Airmap.Telemetry.Barometer.Builder {
      return try Airmap.Telemetry.Barometer.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasTimestamp {
        jsonMap["timestamp"] = "\(timestamp)"
      }
      if hasPressure {
        jsonMap["pressure"] = Float(pressure)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      if hasPressure {
        output += "\(indent) pressure: \(pressure) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            if hasPressure {
               hashCode = (hashCode &* 31) &+ pressure.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Barometer"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Barometer"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Airmap.Telemetry.Barometer = Airmap.Telemetry.Barometer()
      public func getMessage() -> Airmap.Telemetry.Barometer {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      public var timestamp:UInt64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      @discardableResult
      public func setTimestamp(_ value:UInt64) -> Airmap.Telemetry.Barometer.Builder {
        self.timestamp = value
        return self
      }
      @discardableResult
      public func clearTimestamp() -> Airmap.Telemetry.Barometer.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = UInt64(0)
           return self
      }
      public var hasPressure:Bool {
           get {
                return builderResult.hasPressure
           }
      }
      public var pressure:Float {
           get {
                return builderResult.pressure
           }
           set (value) {
               builderResult.hasPressure = true
               builderResult.pressure = value
           }
      }
      @discardableResult
      public func setPressure(_ value:Float) -> Airmap.Telemetry.Barometer.Builder {
        self.pressure = value
        return self
      }
      @discardableResult
      public func clearPressure() -> Airmap.Telemetry.Barometer.Builder{
           builderResult.hasPressure = false
           builderResult.pressure = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Airmap.Telemetry.Barometer.Builder {
        builderResult = Airmap.Telemetry.Barometer()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Barometer.Builder {
        return try Airmap.Telemetry.Barometer.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Barometer {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Barometer {
        let returnMe:Airmap.Telemetry.Barometer = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Airmap.Telemetry.Barometer) throws -> Airmap.Telemetry.Barometer.Builder {
        if other == Airmap.Telemetry.Barometer() {
         return self
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        if other.hasPressure {
             pressure = other.pressure
        }
        try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Barometer.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            timestamp = try codedInputStream.readUInt64()

          case 21:
            pressure = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Barometer.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Barometer.Builder()
        if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
          resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
        }
        if let jsonValuePressure = jsonMap["pressure"] as? Float {
          resultDecodedBuilder.pressure = Float(jsonValuePressure)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Airmap.Telemetry.Barometer.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Barometer.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Airmap.Telemetry.Position: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Airmap.Telemetry.Position> {
    var mergedArray = Array<Airmap.Telemetry.Position>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Position? {
    return try Airmap.Telemetry.Position.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Airmap.Telemetry.Position {
    return try Airmap.Telemetry.Position.Builder().mergeFrom(data: data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
    return try Airmap.Telemetry.Position.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Position {
    return try Airmap.Telemetry.Position.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
    return try Airmap.Telemetry.Position.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Position {
    return try Airmap.Telemetry.Position.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
    return try Airmap.Telemetry.Position.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Airmap.Telemetry.Attitude: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Airmap.Telemetry.Attitude> {
    var mergedArray = Array<Airmap.Telemetry.Attitude>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Attitude? {
    return try Airmap.Telemetry.Attitude.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Airmap.Telemetry.Attitude {
    return try Airmap.Telemetry.Attitude.Builder().mergeFrom(data: data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Attitude {
    return try Airmap.Telemetry.Attitude.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Attitude {
    return try Airmap.Telemetry.Attitude.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Attitude {
    return try Airmap.Telemetry.Attitude.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Attitude {
    return try Airmap.Telemetry.Attitude.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Attitude {
    return try Airmap.Telemetry.Attitude.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Airmap.Telemetry.Speed: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Airmap.Telemetry.Speed> {
    var mergedArray = Array<Airmap.Telemetry.Speed>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Speed? {
    return try Airmap.Telemetry.Speed.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Airmap.Telemetry.Speed {
    return try Airmap.Telemetry.Speed.Builder().mergeFrom(data: data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed {
    return try Airmap.Telemetry.Speed.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Speed {
    return try Airmap.Telemetry.Speed.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed {
    return try Airmap.Telemetry.Speed.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Speed {
    return try Airmap.Telemetry.Speed.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed {
    return try Airmap.Telemetry.Speed.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Airmap.Telemetry.Barometer: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Airmap.Telemetry.Barometer> {
    var mergedArray = Array<Airmap.Telemetry.Barometer>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Barometer? {
    return try Airmap.Telemetry.Barometer.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Airmap.Telemetry.Barometer {
    return try Airmap.Telemetry.Barometer.Builder().mergeFrom(data: data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
    return try Airmap.Telemetry.Barometer.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Barometer {
    return try Airmap.Telemetry.Barometer.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
    return try Airmap.Telemetry.Barometer.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Barometer {
    return try Airmap.Telemetry.Barometer.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
    return try Airmap.Telemetry.Barometer.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
