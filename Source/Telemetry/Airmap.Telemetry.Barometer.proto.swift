/// Generated by the Protocol Buffers 3.5.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "barometer.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Airmap.Telemetry {
    public struct BarometerRoot {
        public static let `default` = BarometerRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class Barometer : GeneratedMessage {
        public typealias BuilderType = Airmap.Telemetry.Barometer.Builder

        public static func == (lhs: Airmap.Telemetry.Barometer, rhs: Airmap.Telemetry.Barometer) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
            fieldCheck = fieldCheck && (lhs.hasPressure == rhs.hasPressure) && (!lhs.hasPressure || lhs.pressure == rhs.pressure)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// UNIX time in Milliseconds
        public fileprivate(set) var timestamp:UInt64! = nil
        public fileprivate(set) var hasTimestamp:Bool = false

        /// Barometric pressure in hPa
        public fileprivate(set) var pressure:Float! = nil
        public fileprivate(set) var hasPressure:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() throws {
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasTimestamp {
                try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
            }
            if hasPressure {
                try codedOutputStream.writeFloat(fieldNumber: 2, value:pressure)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasTimestamp {
                serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
            }
            if hasPressure {
                serialize_size += pressure.computeFloatSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Airmap.Telemetry.Barometer.Builder {
            return Airmap.Telemetry.Barometer.classBuilder() as! Airmap.Telemetry.Barometer.Builder
        }
        public func getBuilder() -> Airmap.Telemetry.Barometer.Builder {
            return classBuilder() as! Airmap.Telemetry.Barometer.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Airmap.Telemetry.Barometer.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Airmap.Telemetry.Barometer.Builder()
        }
        public func toBuilder() throws -> Airmap.Telemetry.Barometer.Builder {
            return try Airmap.Telemetry.Barometer.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Airmap.Telemetry.Barometer) throws -> Airmap.Telemetry.Barometer.Builder {
            return try Airmap.Telemetry.Barometer.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            try isInitialized()
            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasTimestamp {
                jsonMap["timestamp"] = "\(timestamp!)"
            }
            if hasPressure {
                jsonMap["pressure"] = Float(pressure)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Barometer {
            return try Airmap.Telemetry.Barometer.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Airmap.Telemetry.Barometer {
            return try Airmap.Telemetry.Barometer.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasTimestamp {
                output += "\(indent) timestamp: \(timestamp) \n"
            }
            if hasPressure {
                output += "\(indent) pressure: \(pressure) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTimestamp {
                    hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasPressure {
                    hashCode = (hashCode &* 31) &+ pressure.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Airmap.Telemetry.Barometer"
        }
        override public func className() -> String {
            return "Airmap.Telemetry.Barometer"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Airmap.Telemetry.Barometer = Airmap.Telemetry.Barometer()
            public func getMessage() -> Airmap.Telemetry.Barometer {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// UNIX time in Milliseconds
            public var timestamp:UInt64 {
                get {
                    return builderResult.timestamp
                }
                set (value) {
                    builderResult.hasTimestamp = true
                    builderResult.timestamp = value
                }
            }
            public var hasTimestamp:Bool {
                get {
                    return builderResult.hasTimestamp
                }
            }
            @discardableResult
            public func setTimestamp(_ value:UInt64) -> Airmap.Telemetry.Barometer.Builder {
                self.timestamp = value
                return self
            }
            @discardableResult
            public func clearTimestamp() -> Airmap.Telemetry.Barometer.Builder{
                builderResult.hasTimestamp = false
                builderResult.timestamp = nil
                return self
            }
            /// Barometric pressure in hPa
            public var pressure:Float {
                get {
                    return builderResult.pressure
                }
                set (value) {
                    builderResult.hasPressure = true
                    builderResult.pressure = value
                }
            }
            public var hasPressure:Bool {
                get {
                    return builderResult.hasPressure
                }
            }
            @discardableResult
            public func setPressure(_ value:Float) -> Airmap.Telemetry.Barometer.Builder {
                self.pressure = value
                return self
            }
            @discardableResult
            public func clearPressure() -> Airmap.Telemetry.Barometer.Builder{
                builderResult.hasPressure = false
                builderResult.pressure = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Airmap.Telemetry.Barometer.Builder {
                builderResult = Airmap.Telemetry.Barometer()
                return self
            }
            override public func clone() throws -> Airmap.Telemetry.Barometer.Builder {
                return try Airmap.Telemetry.Barometer.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Airmap.Telemetry.Barometer {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Airmap.Telemetry.Barometer {
                let returnMe:Airmap.Telemetry.Barometer = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Airmap.Telemetry.Barometer) throws -> Airmap.Telemetry.Barometer.Builder {
                if other == Airmap.Telemetry.Barometer() {
                    return self
                }
                if other.hasTimestamp {
                    timestamp = other.timestamp
                }
                if other.hasPressure {
                    pressure = other.pressure
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Barometer.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        timestamp = try codedInputStream.readUInt64()

                    case 21:
                        pressure = try codedInputStream.readFloat()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Barometer.Builder {
                let resultDecodedBuilder = Airmap.Telemetry.Barometer.Builder()
                if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
                    resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
                } else if let jsonValueTimestamp = jsonMap["timestamp"] as? UInt {
                    resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)
                }
                if let jsonValuePressure = jsonMap["pressure"] as? Float {
                    resultDecodedBuilder.pressure = Float(jsonValuePressure)
                } else if let jsonValuePressure = jsonMap["pressure"] as? String {
                    resultDecodedBuilder.pressure = Float(jsonValuePressure)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Airmap.Telemetry.Barometer.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Airmap.Telemetry.Barometer.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Airmap.Telemetry.Barometer: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Airmap.Telemetry.Barometer> {
        var mergedArray = Array<Airmap.Telemetry.Barometer>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Barometer? {
        return try Airmap.Telemetry.Barometer.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Airmap.Telemetry.Barometer {
        return try Airmap.Telemetry.Barometer.Builder().mergeFrom(data: data, extensionRegistry:Airmap.Telemetry.BarometerRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
        return try Airmap.Telemetry.Barometer.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Barometer {
        return try Airmap.Telemetry.Barometer.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
        return try Airmap.Telemetry.Barometer.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Barometer {
        return try Airmap.Telemetry.Barometer.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
        return try Airmap.Telemetry.Barometer.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "timestamp": return self.timestamp
        case "pressure": return self.pressure
        default: return nil
        }
    }
}
extension Airmap.Telemetry.Barometer.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Airmap.Telemetry.Barometer
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "timestamp": return self.timestamp
            case "pressure": return self.pressure
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "timestamp":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.timestamp = newSubscriptValue
            case "pressure":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.pressure = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
