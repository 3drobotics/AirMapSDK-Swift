//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Airmap_TelemetryProviderConnectUpdatesCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Airmap_Telemetry.Update.FromService?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Airmap_Telemetry.Update.FromService?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Airmap_Telemetry.Update.FromClient, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Airmap_Telemetry.Update.FromClient, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension Airmap_TelemetryProviderConnectUpdatesCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Airmap_Telemetry.Update.FromService? { return try self._receive(timeout: timeout) }
}

internal extension Airmap_TelemetryProviderConnectUpdatesCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Airmap_Telemetry.Update.FromClient, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Airmap_TelemetryProviderConnectUpdatesCallBase: ClientCallBidirectionalStreamingBase<Airmap_Telemetry.Update.FromClient, Airmap_Telemetry.Update.FromService>, Airmap_TelemetryProviderConnectUpdatesCall {
  override class var method: String { return "/airmap.TelemetryProvider/ConnectUpdates" }
}


/// Instantiate Airmap_TelemetryProviderServiceClient, then call methods of this protocol to make API calls.
internal protocol Airmap_TelemetryProviderService: ServiceClient {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func connectUpdates(completion: ((CallResult) -> Void)?) throws -> Airmap_TelemetryProviderConnectUpdatesCall

}

internal final class Airmap_TelemetryProviderServiceClient: ServiceClientBase, Airmap_TelemetryProviderService {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func connectUpdates(completion: ((CallResult) -> Void)?) throws -> Airmap_TelemetryProviderConnectUpdatesCall {
    return try Airmap_TelemetryProviderConnectUpdatesCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

}

