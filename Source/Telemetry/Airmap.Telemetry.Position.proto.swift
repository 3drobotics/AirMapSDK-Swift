/// Generated by the Protocol Buffers 3.5.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "position.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Airmap.Telemetry {
    public struct PositionRoot {
        public static let `default` = PositionRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class Position : GeneratedMessage {
        public typealias BuilderType = Airmap.Telemetry.Position.Builder

        public static func == (lhs: Airmap.Telemetry.Position, rhs: Airmap.Telemetry.Position) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
            fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
            fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
            fieldCheck = fieldCheck && (lhs.hasAltitudeAgl == rhs.hasAltitudeAgl) && (!lhs.hasAltitudeAgl || lhs.altitudeAgl == rhs.altitudeAgl)
            fieldCheck = fieldCheck && (lhs.hasAltitudeMsl == rhs.hasAltitudeMsl) && (!lhs.hasAltitudeMsl || lhs.altitudeMsl == rhs.altitudeMsl)
            fieldCheck = fieldCheck && (lhs.hasHorizontalAccuracy == rhs.hasHorizontalAccuracy) && (!lhs.hasHorizontalAccuracy || lhs.horizontalAccuracy == rhs.horizontalAccuracy)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        /// UNIX time in Milliseconds
        public fileprivate(set) var timestamp:UInt64! = nil
        public fileprivate(set) var hasTimestamp:Bool = false

        /// The recorded latitude
        /// Decimal place requirement: 7 decimal places.
        public fileprivate(set) var latitude:Double! = nil
        public fileprivate(set) var hasLatitude:Bool = false

        /// The recorded longitude
        /// Decimal place requirement: 7 decimal places.
        public fileprivate(set) var longitude:Double! = nil
        public fileprivate(set) var hasLongitude:Bool = false

        /// Altitude above ground level, meters
        public fileprivate(set) var altitudeAgl:Float! = nil
        public fileprivate(set) var hasAltitudeAgl:Bool = false

        ///Altitude above mean sea level (ie. GPS), meters
        public fileprivate(set) var altitudeMsl:Float! = nil
        public fileprivate(set) var hasAltitudeMsl:Bool = false

        /// Horizontal accuracy in meters
        public fileprivate(set) var horizontalAccuracy:Float! = nil
        public fileprivate(set) var hasHorizontalAccuracy:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() throws {
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasTimestamp {
                try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
            }
            if hasLatitude {
                try codedOutputStream.writeDouble(fieldNumber: 2, value:latitude)
            }
            if hasLongitude {
                try codedOutputStream.writeDouble(fieldNumber: 3, value:longitude)
            }
            if hasAltitudeAgl {
                try codedOutputStream.writeFloat(fieldNumber: 4, value:altitudeAgl)
            }
            if hasAltitudeMsl {
                try codedOutputStream.writeFloat(fieldNumber: 5, value:altitudeMsl)
            }
            if hasHorizontalAccuracy {
                try codedOutputStream.writeFloat(fieldNumber: 6, value:horizontalAccuracy)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasTimestamp {
                serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
            }
            if hasLatitude {
                serialize_size += latitude.computeDoubleSize(fieldNumber: 2)
            }
            if hasLongitude {
                serialize_size += longitude.computeDoubleSize(fieldNumber: 3)
            }
            if hasAltitudeAgl {
                serialize_size += altitudeAgl.computeFloatSize(fieldNumber: 4)
            }
            if hasAltitudeMsl {
                serialize_size += altitudeMsl.computeFloatSize(fieldNumber: 5)
            }
            if hasHorizontalAccuracy {
                serialize_size += horizontalAccuracy.computeFloatSize(fieldNumber: 6)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> Airmap.Telemetry.Position.Builder {
            return Airmap.Telemetry.Position.classBuilder() as! Airmap.Telemetry.Position.Builder
        }
        public func getBuilder() -> Airmap.Telemetry.Position.Builder {
            return classBuilder() as! Airmap.Telemetry.Position.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Airmap.Telemetry.Position.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return Airmap.Telemetry.Position.Builder()
        }
        public func toBuilder() throws -> Airmap.Telemetry.Position.Builder {
            return try Airmap.Telemetry.Position.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Airmap.Telemetry.Position) throws -> Airmap.Telemetry.Position.Builder {
            return try Airmap.Telemetry.Position.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            try isInitialized()
            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasTimestamp {
                jsonMap["timestamp"] = "\(timestamp!)"
            }
            if hasLatitude {
                jsonMap["latitude"] = Double(latitude)
            }
            if hasLongitude {
                jsonMap["longitude"] = Double(longitude)
            }
            if hasAltitudeAgl {
                jsonMap["altitudeAgl"] = Float(altitudeAgl)
            }
            if hasAltitudeMsl {
                jsonMap["altitudeMsl"] = Float(altitudeMsl)
            }
            if hasHorizontalAccuracy {
                jsonMap["horizontalAccuracy"] = Float(horizontalAccuracy)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Position {
            return try Airmap.Telemetry.Position.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Airmap.Telemetry.Position {
            return try Airmap.Telemetry.Position.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasTimestamp {
                output += "\(indent) timestamp: \(timestamp) \n"
            }
            if hasLatitude {
                output += "\(indent) latitude: \(latitude) \n"
            }
            if hasLongitude {
                output += "\(indent) longitude: \(longitude) \n"
            }
            if hasAltitudeAgl {
                output += "\(indent) altitudeAgl: \(altitudeAgl) \n"
            }
            if hasAltitudeMsl {
                output += "\(indent) altitudeMsl: \(altitudeMsl) \n"
            }
            if hasHorizontalAccuracy {
                output += "\(indent) horizontalAccuracy: \(horizontalAccuracy) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTimestamp {
                    hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasLatitude {
                    hashCode = (hashCode &* 31) &+ latitude.hashValue
                }
                if hasLongitude {
                    hashCode = (hashCode &* 31) &+ longitude.hashValue
                }
                if hasAltitudeAgl {
                    hashCode = (hashCode &* 31) &+ altitudeAgl.hashValue
                }
                if hasAltitudeMsl {
                    hashCode = (hashCode &* 31) &+ altitudeMsl.hashValue
                }
                if hasHorizontalAccuracy {
                    hashCode = (hashCode &* 31) &+ horizontalAccuracy.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Airmap.Telemetry.Position"
        }
        override public func className() -> String {
            return "Airmap.Telemetry.Position"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:Airmap.Telemetry.Position = Airmap.Telemetry.Position()
            public func getMessage() -> Airmap.Telemetry.Position {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            /// UNIX time in Milliseconds
            public var timestamp:UInt64 {
                get {
                    return builderResult.timestamp
                }
                set (value) {
                    builderResult.hasTimestamp = true
                    builderResult.timestamp = value
                }
            }
            public var hasTimestamp:Bool {
                get {
                    return builderResult.hasTimestamp
                }
            }
            @discardableResult
            public func setTimestamp(_ value:UInt64) -> Airmap.Telemetry.Position.Builder {
                self.timestamp = value
                return self
            }
            @discardableResult
            public func clearTimestamp() -> Airmap.Telemetry.Position.Builder{
                builderResult.hasTimestamp = false
                builderResult.timestamp = nil
                return self
            }
            /// The recorded latitude
            /// Decimal place requirement: 7 decimal places.
            public var latitude:Double {
                get {
                    return builderResult.latitude
                }
                set (value) {
                    builderResult.hasLatitude = true
                    builderResult.latitude = value
                }
            }
            public var hasLatitude:Bool {
                get {
                    return builderResult.hasLatitude
                }
            }
            @discardableResult
            public func setLatitude(_ value:Double) -> Airmap.Telemetry.Position.Builder {
                self.latitude = value
                return self
            }
            @discardableResult
            public func clearLatitude() -> Airmap.Telemetry.Position.Builder{
                builderResult.hasLatitude = false
                builderResult.latitude = nil
                return self
            }
            /// The recorded longitude
            /// Decimal place requirement: 7 decimal places.
            public var longitude:Double {
                get {
                    return builderResult.longitude
                }
                set (value) {
                    builderResult.hasLongitude = true
                    builderResult.longitude = value
                }
            }
            public var hasLongitude:Bool {
                get {
                    return builderResult.hasLongitude
                }
            }
            @discardableResult
            public func setLongitude(_ value:Double) -> Airmap.Telemetry.Position.Builder {
                self.longitude = value
                return self
            }
            @discardableResult
            public func clearLongitude() -> Airmap.Telemetry.Position.Builder{
                builderResult.hasLongitude = false
                builderResult.longitude = nil
                return self
            }
            /// Altitude above ground level, meters
            public var altitudeAgl:Float {
                get {
                    return builderResult.altitudeAgl
                }
                set (value) {
                    builderResult.hasAltitudeAgl = true
                    builderResult.altitudeAgl = value
                }
            }
            public var hasAltitudeAgl:Bool {
                get {
                    return builderResult.hasAltitudeAgl
                }
            }
            @discardableResult
            public func setAltitudeAgl(_ value:Float) -> Airmap.Telemetry.Position.Builder {
                self.altitudeAgl = value
                return self
            }
            @discardableResult
            public func clearAltitudeAgl() -> Airmap.Telemetry.Position.Builder{
                builderResult.hasAltitudeAgl = false
                builderResult.altitudeAgl = nil
                return self
            }
            ///Altitude above mean sea level (ie. GPS), meters
            public var altitudeMsl:Float {
                get {
                    return builderResult.altitudeMsl
                }
                set (value) {
                    builderResult.hasAltitudeMsl = true
                    builderResult.altitudeMsl = value
                }
            }
            public var hasAltitudeMsl:Bool {
                get {
                    return builderResult.hasAltitudeMsl
                }
            }
            @discardableResult
            public func setAltitudeMsl(_ value:Float) -> Airmap.Telemetry.Position.Builder {
                self.altitudeMsl = value
                return self
            }
            @discardableResult
            public func clearAltitudeMsl() -> Airmap.Telemetry.Position.Builder{
                builderResult.hasAltitudeMsl = false
                builderResult.altitudeMsl = nil
                return self
            }
            /// Horizontal accuracy in meters
            public var horizontalAccuracy:Float {
                get {
                    return builderResult.horizontalAccuracy
                }
                set (value) {
                    builderResult.hasHorizontalAccuracy = true
                    builderResult.horizontalAccuracy = value
                }
            }
            public var hasHorizontalAccuracy:Bool {
                get {
                    return builderResult.hasHorizontalAccuracy
                }
            }
            @discardableResult
            public func setHorizontalAccuracy(_ value:Float) -> Airmap.Telemetry.Position.Builder {
                self.horizontalAccuracy = value
                return self
            }
            @discardableResult
            public func clearHorizontalAccuracy() -> Airmap.Telemetry.Position.Builder{
                builderResult.hasHorizontalAccuracy = false
                builderResult.horizontalAccuracy = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> Airmap.Telemetry.Position.Builder {
                builderResult = Airmap.Telemetry.Position()
                return self
            }
            override public func clone() throws -> Airmap.Telemetry.Position.Builder {
                return try Airmap.Telemetry.Position.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> Airmap.Telemetry.Position {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> Airmap.Telemetry.Position {
                let returnMe:Airmap.Telemetry.Position = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:Airmap.Telemetry.Position) throws -> Airmap.Telemetry.Position.Builder {
                if other == Airmap.Telemetry.Position() {
                    return self
                }
                if other.hasTimestamp {
                    timestamp = other.timestamp
                }
                if other.hasLatitude {
                    latitude = other.latitude
                }
                if other.hasLongitude {
                    longitude = other.longitude
                }
                if other.hasAltitudeAgl {
                    altitudeAgl = other.altitudeAgl
                }
                if other.hasAltitudeMsl {
                    altitudeMsl = other.altitudeMsl
                }
                if other.hasHorizontalAccuracy {
                    horizontalAccuracy = other.horizontalAccuracy
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Position.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        timestamp = try codedInputStream.readUInt64()

                    case 17:
                        latitude = try codedInputStream.readDouble()

                    case 25:
                        longitude = try codedInputStream.readDouble()

                    case 37:
                        altitudeAgl = try codedInputStream.readFloat()

                    case 45:
                        altitudeMsl = try codedInputStream.readFloat()

                    case 53:
                        horizontalAccuracy = try codedInputStream.readFloat()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Airmap.Telemetry.Position.Builder {
                let resultDecodedBuilder = Airmap.Telemetry.Position.Builder()
                if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
                    resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
                } else if let jsonValueTimestamp = jsonMap["timestamp"] as? UInt {
                    resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)
                }
                if let jsonValueLatitude = jsonMap["latitude"] as? Double {
                    resultDecodedBuilder.latitude = Double(jsonValueLatitude)
                } else if let jsonValueLatitude = jsonMap["latitude"] as? String {
                    resultDecodedBuilder.latitude = Double(jsonValueLatitude)!
                }
                if let jsonValueLongitude = jsonMap["longitude"] as? Double {
                    resultDecodedBuilder.longitude = Double(jsonValueLongitude)
                } else if let jsonValueLongitude = jsonMap["longitude"] as? String {
                    resultDecodedBuilder.longitude = Double(jsonValueLongitude)!
                }
                if let jsonValueAltitudeAgl = jsonMap["altitudeAgl"] as? Float {
                    resultDecodedBuilder.altitudeAgl = Float(jsonValueAltitudeAgl)
                } else if let jsonValueAltitudeAgl = jsonMap["altitudeAgl"] as? String {
                    resultDecodedBuilder.altitudeAgl = Float(jsonValueAltitudeAgl)!
                }
                if let jsonValueAltitudeMsl = jsonMap["altitudeMsl"] as? Float {
                    resultDecodedBuilder.altitudeMsl = Float(jsonValueAltitudeMsl)
                } else if let jsonValueAltitudeMsl = jsonMap["altitudeMsl"] as? String {
                    resultDecodedBuilder.altitudeMsl = Float(jsonValueAltitudeMsl)!
                }
                if let jsonValueHorizontalAccuracy = jsonMap["horizontalAccuracy"] as? Float {
                    resultDecodedBuilder.horizontalAccuracy = Float(jsonValueHorizontalAccuracy)
                } else if let jsonValueHorizontalAccuracy = jsonMap["horizontalAccuracy"] as? String {
                    resultDecodedBuilder.horizontalAccuracy = Float(jsonValueHorizontalAccuracy)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> Airmap.Telemetry.Position.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Airmap.Telemetry.Position.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension Airmap.Telemetry.Position: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Airmap.Telemetry.Position> {
        var mergedArray = Array<Airmap.Telemetry.Position>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Position? {
        return try Airmap.Telemetry.Position.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Airmap.Telemetry.Position {
        return try Airmap.Telemetry.Position.Builder().mergeFrom(data: data, extensionRegistry:Airmap.Telemetry.PositionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
        return try Airmap.Telemetry.Position.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Airmap.Telemetry.Position {
        return try Airmap.Telemetry.Position.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
        return try Airmap.Telemetry.Position.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Airmap.Telemetry.Position {
        return try Airmap.Telemetry.Position.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
        return try Airmap.Telemetry.Position.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "timestamp": return self.timestamp
        case "latitude": return self.latitude
        case "longitude": return self.longitude
        case "altitudeAgl": return self.altitudeAgl
        case "altitudeMsl": return self.altitudeMsl
        case "horizontalAccuracy": return self.horizontalAccuracy
        default: return nil
        }
    }
}
extension Airmap.Telemetry.Position.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Airmap.Telemetry.Position
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "timestamp": return self.timestamp
            case "latitude": return self.latitude
            case "longitude": return self.longitude
            case "altitudeAgl": return self.altitudeAgl
            case "altitudeMsl": return self.altitudeMsl
            case "horizontalAccuracy": return self.horizontalAccuracy
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "timestamp":
                guard let newSubscriptValue = newSubscriptValue as? UInt64 else {
                    return
                }
                self.timestamp = newSubscriptValue
            case "latitude":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.latitude = newSubscriptValue
            case "longitude":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.longitude = newSubscriptValue
            case "altitudeAgl":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.altitudeAgl = newSubscriptValue
            case "altitudeMsl":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.altitudeMsl = newSubscriptValue
            case "horizontalAccuracy":
                guard let newSubscriptValue = newSubscriptValue as? Float else {
                    return
                }
                self.horizontalAccuracy = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
