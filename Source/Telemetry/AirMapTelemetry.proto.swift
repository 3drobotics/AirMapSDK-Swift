// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "telemetry.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct Airmap { public struct Telemetry { }}

public func == (lhs: Airmap.Telemetry.Position, rhs: Airmap.Telemetry.Position) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
  fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Airmap.Telemetry.Speed, rhs: Airmap.Telemetry.Speed) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGroundSpeed == rhs.hasGroundSpeed) && (!lhs.hasGroundSpeed || lhs.groundSpeed == rhs.groundSpeed)
  fieldCheck = fieldCheck && (lhs.hasTrueHeading == rhs.hasTrueHeading) && (!lhs.hasTrueHeading || lhs.trueHeading == rhs.trueHeading)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Airmap.Telemetry.Barometer, rhs: Airmap.Telemetry.Barometer) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBarometer == rhs.hasBarometer) && (!lhs.hasBarometer || lhs.barometer == rhs.barometer)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Airmap.Telemetry {
  public struct TelemetryRoot {
    public static var sharedInstance : TelemetryRoot {
     struct Static {
         static let instance : TelemetryRoot = TelemetryRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class Position : GeneratedMessage, GeneratedMessageProtocol {
    // Decimal place requirement: 7 decimal places.
    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    // Decimal place requirement: 7 decimal places.
    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    // Altitude is always in Meters
    public private(set) var hasAltitude:Bool = false
    public private(set) var altitude:Float = Float(0)

    // Milliseconds since epoc UTC
    public private(set) var hasTimestamp:Bool = false
    public private(set) var timestamp:UInt64 = UInt64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasLatitude {
        try output.writeDouble(1, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(2, value:longitude)
      }
      if hasAltitude {
        try output.writeFloat(3, value:altitude)
      }
      if hasTimestamp {
        try output.writeUInt64(4, value:timestamp)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(1)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(2)
      }
      if hasAltitude {
        serialize_size += altitude.computeFloatSize(3)
      }
      if hasTimestamp {
        serialize_size += timestamp.computeUInt64Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Airmap.Telemetry.Position> {
      var mergedArray = Array<Airmap.Telemetry.Position>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Airmap.Telemetry.Position? {
      return try Airmap.Telemetry.Position.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder().mergeFromData(data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Airmap.Telemetry.Position.Builder {
      return Airmap.Telemetry.Position.classBuilder() as! Airmap.Telemetry.Position.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Position.Builder {
      return classBuilder() as! Airmap.Telemetry.Position.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Airmap.Telemetry.Position.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Airmap.Telemetry.Position.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Position.Builder {
      return try Airmap.Telemetry.Position.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Position) throws -> Airmap.Telemetry.Position.Builder {
      return try Airmap.Telemetry.Position.Builder().mergeFrom(prototype)
    }
    public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasAltitude {
        jsonMap["altitude"] = NSNumber(float:altitude)
      }
      if hasTimestamp {
        jsonMap["timestamp"] = "\(timestamp)"
      }
      return jsonMap
    }
    class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder.decodeToBuilder(jsonMap).build()
    }
    class public func fromJSON(data:NSData) throws -> Airmap.Telemetry.Position {
      return try Airmap.Telemetry.Position.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasAltitude {
        output += "\(indent) altitude: \(altitude) \n"
      }
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasAltitude {
               hashCode = (hashCode &* 31) &+ altitude.hashValue
            }
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Position"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Position"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Airmap.Telemetry.Position.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Airmap.Telemetry.Position = Airmap.Telemetry.Position()
      public func getMessage() -> Airmap.Telemetry.Position {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Airmap.Telemetry.Position.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Airmap.Telemetry.Position.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasAltitude:Bool {
           get {
                return builderResult.hasAltitude
           }
      }
      public var altitude:Float {
           get {
                return builderResult.altitude
           }
           set (value) {
               builderResult.hasAltitude = true
               builderResult.altitude = value
           }
      }
      public func setAltitude(value:Float) -> Airmap.Telemetry.Position.Builder {
        self.altitude = value
        return self
      }
      public func clearAltitude() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasAltitude = false
           builderResult.altitude = Float(0)
           return self
      }
      public var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      public var timestamp:UInt64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      public func setTimestamp(value:UInt64) -> Airmap.Telemetry.Position.Builder {
        self.timestamp = value
        return self
      }
      public func clearTimestamp() -> Airmap.Telemetry.Position.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Airmap.Telemetry.Position.Builder {
        builderResult = Airmap.Telemetry.Position()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Position.Builder {
        return try Airmap.Telemetry.Position.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Position {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Position {
        let returnMe:Airmap.Telemetry.Position = builderResult
        return returnMe
      }
      public func mergeFrom(other:Airmap.Telemetry.Position) throws -> Airmap.Telemetry.Position.Builder {
        if other == Airmap.Telemetry.Position() {
         return self
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasAltitude {
             altitude = other.altitude
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Airmap.Telemetry.Position.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Position.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            latitude = try input.readDouble()

          case 17:
            longitude = try input.readDouble()

          case 29:
            altitude = try input.readFloat()

          case 32:
            timestamp = try input.readUInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Airmap.Telemetry.Position.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Position.Builder()
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueAltitude = jsonMap["altitude"] as? NSNumber {
          resultDecodedBuilder.altitude = jsonValueAltitude.floatValue
        }
        if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
          resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
        }
        return resultDecodedBuilder
      }
      class public func fromJSONToBuilder(data:NSData) throws -> Airmap.Telemetry.Position.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Position.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Speed : GeneratedMessage, GeneratedMessageProtocol {
    // Ground speed in meters/second.
    public private(set) var hasGroundSpeed:Bool = false
    public private(set) var groundSpeed:Float = Float(0)

    // Heading relative to True North
    public private(set) var hasTrueHeading:Bool = false
    public private(set) var trueHeading:Float = Float(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasGroundSpeed {
        try output.writeFloat(1, value:groundSpeed)
      }
      if hasTrueHeading {
        try output.writeFloat(2, value:trueHeading)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGroundSpeed {
        serialize_size += groundSpeed.computeFloatSize(1)
      }
      if hasTrueHeading {
        serialize_size += trueHeading.computeFloatSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Airmap.Telemetry.Speed> {
      var mergedArray = Array<Airmap.Telemetry.Speed>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Airmap.Telemetry.Speed? {
      return try Airmap.Telemetry.Speed.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder().mergeFromData(data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Airmap.Telemetry.Speed.Builder {
      return Airmap.Telemetry.Speed.classBuilder() as! Airmap.Telemetry.Speed.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Speed.Builder {
      return classBuilder() as! Airmap.Telemetry.Speed.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Airmap.Telemetry.Speed.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Airmap.Telemetry.Speed.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Speed.Builder {
      return try Airmap.Telemetry.Speed.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Speed) throws -> Airmap.Telemetry.Speed.Builder {
      return try Airmap.Telemetry.Speed.Builder().mergeFrom(prototype)
    }
    public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasGroundSpeed {
        jsonMap["groundSpeed"] = NSNumber(float:groundSpeed)
      }
      if hasTrueHeading {
        jsonMap["trueHeading"] = NSNumber(float:trueHeading)
      }
      return jsonMap
    }
    class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder.decodeToBuilder(jsonMap).build()
    }
    class public func fromJSON(data:NSData) throws -> Airmap.Telemetry.Speed {
      return try Airmap.Telemetry.Speed.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasGroundSpeed {
        output += "\(indent) groundSpeed: \(groundSpeed) \n"
      }
      if hasTrueHeading {
        output += "\(indent) trueHeading: \(trueHeading) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGroundSpeed {
               hashCode = (hashCode &* 31) &+ groundSpeed.hashValue
            }
            if hasTrueHeading {
               hashCode = (hashCode &* 31) &+ trueHeading.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Speed"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Speed"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Airmap.Telemetry.Speed.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Airmap.Telemetry.Speed = Airmap.Telemetry.Speed()
      public func getMessage() -> Airmap.Telemetry.Speed {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasGroundSpeed:Bool {
           get {
                return builderResult.hasGroundSpeed
           }
      }
      public var groundSpeed:Float {
           get {
                return builderResult.groundSpeed
           }
           set (value) {
               builderResult.hasGroundSpeed = true
               builderResult.groundSpeed = value
           }
      }
      public func setGroundSpeed(value:Float) -> Airmap.Telemetry.Speed.Builder {
        self.groundSpeed = value
        return self
      }
      public func clearGroundSpeed() -> Airmap.Telemetry.Speed.Builder{
           builderResult.hasGroundSpeed = false
           builderResult.groundSpeed = Float(0)
           return self
      }
      public var hasTrueHeading:Bool {
           get {
                return builderResult.hasTrueHeading
           }
      }
      public var trueHeading:Float {
           get {
                return builderResult.trueHeading
           }
           set (value) {
               builderResult.hasTrueHeading = true
               builderResult.trueHeading = value
           }
      }
      public func setTrueHeading(value:Float) -> Airmap.Telemetry.Speed.Builder {
        self.trueHeading = value
        return self
      }
      public func clearTrueHeading() -> Airmap.Telemetry.Speed.Builder{
           builderResult.hasTrueHeading = false
           builderResult.trueHeading = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Airmap.Telemetry.Speed.Builder {
        builderResult = Airmap.Telemetry.Speed()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Speed.Builder {
        return try Airmap.Telemetry.Speed.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Speed {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Speed {
        let returnMe:Airmap.Telemetry.Speed = builderResult
        return returnMe
      }
      public func mergeFrom(other:Airmap.Telemetry.Speed) throws -> Airmap.Telemetry.Speed.Builder {
        if other == Airmap.Telemetry.Speed() {
         return self
        }
        if other.hasGroundSpeed {
             groundSpeed = other.groundSpeed
        }
        if other.hasTrueHeading {
             trueHeading = other.trueHeading
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Airmap.Telemetry.Speed.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Speed.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            groundSpeed = try input.readFloat()

          case 21:
            trueHeading = try input.readFloat()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Airmap.Telemetry.Speed.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Speed.Builder()
        if let jsonValueGroundSpeed = jsonMap["groundSpeed"] as? NSNumber {
          resultDecodedBuilder.groundSpeed = jsonValueGroundSpeed.floatValue
        }
        if let jsonValueTrueHeading = jsonMap["trueHeading"] as? NSNumber {
          resultDecodedBuilder.trueHeading = jsonValueTrueHeading.floatValue
        }
        return resultDecodedBuilder
      }
      class public func fromJSONToBuilder(data:NSData) throws -> Airmap.Telemetry.Speed.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Speed.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Barometer : GeneratedMessage, GeneratedMessageProtocol {
    // Barometric reading, hPa
    public private(set) var hasBarometer:Bool = false
    public private(set) var barometer:Float = Float(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBarometer {
        try output.writeFloat(1, value:barometer)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBarometer {
        serialize_size += barometer.computeFloatSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Airmap.Telemetry.Barometer> {
      var mergedArray = Array<Airmap.Telemetry.Barometer>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Airmap.Telemetry.Barometer? {
      return try Airmap.Telemetry.Barometer.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder().mergeFromData(data, extensionRegistry:Airmap.Telemetry.TelemetryRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Airmap.Telemetry.Barometer.Builder {
      return Airmap.Telemetry.Barometer.classBuilder() as! Airmap.Telemetry.Barometer.Builder
    }
    public func getBuilder() -> Airmap.Telemetry.Barometer.Builder {
      return classBuilder() as! Airmap.Telemetry.Barometer.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Airmap.Telemetry.Barometer.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Airmap.Telemetry.Barometer.Builder()
    }
    public func toBuilder() throws -> Airmap.Telemetry.Barometer.Builder {
      return try Airmap.Telemetry.Barometer.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Airmap.Telemetry.Barometer) throws -> Airmap.Telemetry.Barometer.Builder {
      return try Airmap.Telemetry.Barometer.Builder().mergeFrom(prototype)
    }
    public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasBarometer {
        jsonMap["barometer"] = NSNumber(float:barometer)
      }
      return jsonMap
    }
    class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder.decodeToBuilder(jsonMap).build()
    }
    class public func fromJSON(data:NSData) throws -> Airmap.Telemetry.Barometer {
      return try Airmap.Telemetry.Barometer.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasBarometer {
        output += "\(indent) barometer: \(barometer) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBarometer {
               hashCode = (hashCode &* 31) &+ barometer.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Airmap.Telemetry.Barometer"
    }
    override public func className() -> String {
        return "Airmap.Telemetry.Barometer"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Airmap.Telemetry.Barometer.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Airmap.Telemetry.Barometer = Airmap.Telemetry.Barometer()
      public func getMessage() -> Airmap.Telemetry.Barometer {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasBarometer:Bool {
           get {
                return builderResult.hasBarometer
           }
      }
      public var barometer:Float {
           get {
                return builderResult.barometer
           }
           set (value) {
               builderResult.hasBarometer = true
               builderResult.barometer = value
           }
      }
      public func setBarometer(value:Float) -> Airmap.Telemetry.Barometer.Builder {
        self.barometer = value
        return self
      }
      public func clearBarometer() -> Airmap.Telemetry.Barometer.Builder{
           builderResult.hasBarometer = false
           builderResult.barometer = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Airmap.Telemetry.Barometer.Builder {
        builderResult = Airmap.Telemetry.Barometer()
        return self
      }
      override public func clone() throws -> Airmap.Telemetry.Barometer.Builder {
        return try Airmap.Telemetry.Barometer.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Airmap.Telemetry.Barometer {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Airmap.Telemetry.Barometer {
        let returnMe:Airmap.Telemetry.Barometer = builderResult
        return returnMe
      }
      public func mergeFrom(other:Airmap.Telemetry.Barometer) throws -> Airmap.Telemetry.Barometer.Builder {
        if other == Airmap.Telemetry.Barometer() {
         return self
        }
        if other.hasBarometer {
             barometer = other.barometer
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Airmap.Telemetry.Barometer.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Airmap.Telemetry.Barometer.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            barometer = try input.readFloat()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Airmap.Telemetry.Barometer.Builder {
        let resultDecodedBuilder = Airmap.Telemetry.Barometer.Builder()
        if let jsonValueBarometer = jsonMap["barometer"] as? NSNumber {
          resultDecodedBuilder.barometer = jsonValueBarometer.floatValue
        }
        return resultDecodedBuilder
      }
      class public func fromJSONToBuilder(data:NSData) throws -> Airmap.Telemetry.Barometer.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Airmap.Telemetry.Barometer.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
